var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
window.onload = function () {
    var img = document.getElementById("ir-img");
    var canvas = document.getElementById('can'); //document.createElement("canvas");//
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0, img.width, img.height);
    var pixelData = ctx.getImageData(10, 10, 1, 1).data;
    var rainbowPalette = [[25, 122, 159], [25, 122, 159], [25, 122, 160], [25, 122, 160], [25, 122, 160], [25, 122, 160], [25, 121, 161], [25, 121, 161], [26, 121, 163], [26, 121, 163], [28, 119, 165], [28, 119, 165], [32, 116, 165], [32, 116, 165], [39, 111, 166], [43, 108, 167], [43, 108, 167], [47, 106, 168], [47, 106, 168], [49, 104, 170], [49, 104, 170], [54, 101, 172], [54, 101, 172], [55, 100, 173], [55, 100, 173], [56, 99, 174], [56, 99, 174], [58, 97, 175], [62, 95, 178], [62, 95, 178], [64, 93, 179], [64, 93, 179], [66, 91, 180], [66, 91, 180], [68, 90, 182], [68, 90, 182], [71, 88, 185], [71, 88, 185], [73, 86, 186], [73, 86, 186], [75, 85, 188], [75, 85, 188], [79, 82, 190], [81, 80, 191], [81, 80, 191], [84, 79, 192], [84, 79, 192], [84, 78, 192], [84, 78, 192], [86, 77, 192], [86, 77, 192], [89, 75, 194], [89, 75, 194], [90, 74, 194], [90, 74, 194], [93, 72, 194], [95, 71, 193], [95, 71, 193], [97, 69, 191], [97, 69, 191], [98, 69, 189], [98, 69, 189], [100, 68, 186], [100, 68, 186], [103, 67, 183], [103, 67, 183], [104, 66, 177], [104, 66, 177], [105, 67, 172], [105, 67, 172], [106, 67, 164], [107, 68, 157], [107, 68, 157], [107, 68, 154], [107, 68, 154], [108, 69, 149], [108, 69, 149], [109, 71, 139], [109, 71, 139], [113, 75, 126], [113, 75, 126], [116, 80, 117], [116, 80, 117], [120, 84, 107], [125, 90, 95], [125, 90, 95], [129, 94, 87], [129, 94, 87], [133, 98, 80], [133, 98, 80], [136, 101, 74], [136, 101, 74], [142, 107, 66], [142, 107, 66], [146, 111, 62], [146, 111, 62], [150, 114, 57], [150, 114, 57], [153, 117, 53], [156, 120, 50], [156, 120, 50], [160, 123, 47], [160, 123, 47], [163, 127, 44], [163, 127, 44], [166, 130, 42], [166, 130, 42], [171, 134, 39], [171, 134, 39], [173, 136, 37], [173, 136, 37], [175, 138, 37], [179, 142, 35], [179, 142, 35], [180, 145, 35], [180, 145, 35], [181, 147, 35], [181, 147, 35], [181, 149, 35], [181, 149, 35], [183, 152, 35], [183, 152, 35], [183, 152, 35], [183, 152, 35], [183, 153, 35], [183, 153, 35], [183, 155, 36], [182, 158, 37], [182, 158, 37], [181, 160, 37], [181, 160, 37], [180, 162, 39], [180, 162, 39], [180, 163, 39], [180, 163, 39], [178, 166, 42], [178, 166, 42], [176, 168, 43], [176, 168, 43], [175, 170, 45], [171, 174, 48], [171, 174, 48], [168, 176, 50], [168, 176, 50], [166, 178, 52], [166, 178, 52], [164, 180, 54], [164, 180, 54], [162, 181, 56], [162, 181, 56], [156, 185, 61], [156, 185, 61], [153, 188, 64], [153, 188, 64], [149, 191, 67], [141, 197, 74], [141, 197, 74], [135, 201, 79], [135, 201, 79], [130, 205, 83], [130, 205, 83], [124, 208, 88], [124, 208, 88], [117, 213, 94], [117, 213, 94], [113, 216, 98], [113, 216, 98], [109, 218, 102], [103, 222, 107], [103, 222, 107], [102, 223, 109], [102, 223, 109], [101, 223, 110], [101, 223, 110], [100, 223, 112], [100, 223, 112], [100, 223, 113], [100, 223, 113], [99, 223, 116], [99, 223, 116], [100, 222, 118], [100, 222, 118], [101, 221, 119], [107, 216, 118], [107, 216, 118], [111, 213, 118], [111, 213, 118], [117, 210, 117], [117, 210, 117], [122, 206, 116], [122, 206, 116], [131, 200, 113], [131, 200, 113], [138, 196, 111], [138, 196, 111], [140, 194, 111], [143, 193, 111], [143, 193, 111], [151, 187, 110], [151, 187, 110], [157, 184, 109], [157, 184, 109], [162, 181, 109], [162, 181, 109], [167, 177, 108], [167, 177, 108], [175, 172, 107], [175, 172, 107], [181, 168, 107], [181, 168, 107], [186, 163, 107], [194, 158, 107], [194, 158, 107], [199, 155, 108], [199, 155, 108], [203, 151, 109], [203, 151, 109], [209, 147, 109], [209, 147, 109], [212, 145, 112], [212, 145, 112], [215, 143, 114], [215, 143, 114], [218, 141, 113]];
    var ironPalette = [[16, 101, 140], [17, 103, 142], [18, 105, 145], [19, 106, 147], [20, 108, 149], [21, 110, 152], [22, 112, 154], [23, 114, 156], [24, 116, 158], [25, 118, 160], [26, 120, 162], [27, 121, 164], [28, 123, 165], [29, 125, 167], [30, 127, 169], [31, 128, 170], [32, 130, 172], [33, 132, 173], [34, 133, 174], [35, 135, 175], [36, 136, 177], [37, 138, 178], [38, 140, 179], [39, 141, 180], [40, 143, 181], [41, 144, 181], [42, 145, 182], [43, 147, 183], [44, 148, 183], [44, 150, 184], [45, 151, 185], [46, 152, 185], [47, 154, 185], [48, 155, 186], [49, 156, 186], [50, 157, 186], [51, 159, 186], [52, 160, 186], [53, 161, 186], [54, 162, 186], [55, 163, 186], [56, 165, 186], [57, 166, 186], [58, 167, 186], [59, 168, 186], [60, 169, 185], [61, 170, 185], [62, 171, 185], [63, 172, 184], [64, 173, 184], [65, 174, 183], [66, 175, 182], [67, 176, 182], [68, 177, 181], [69, 177, 180], [70, 178, 180], [71, 179, 179], [72, 180, 178], [73, 181, 177], [74, 182, 176], [75, 182, 175], [76, 183, 174], [77, 184, 173], [78, 184, 172], [79, 185, 171], [80, 186, 170], [81, 186, 169], [82, 187, 168], [83, 188, 166], [84, 188, 165], [85, 189, 164], [86, 189, 163], [87, 190, 161], [88, 190, 160], [89, 191, 159], [90, 191, 157], [91, 192, 156], [92, 192, 154], [93, 193, 153], [94, 193, 151], [95, 194, 150], [96, 194, 148], [97, 194, 147], [98, 195, 145], [99, 195, 144], [99, 195, 142], [100, 196, 140], [101, 196, 139], [102, 196, 137], [103, 197, 135], [104, 197, 134], [105, 197, 132], [106, 197, 130], [107, 197, 129], [108, 198, 127], [109, 198, 125], [110, 198, 123], [111, 198, 122], [112, 198, 120], [113, 198, 118], [114, 198, 117], [115, 198, 115], [116, 198, 113], [117, 198, 111], [118, 198, 109], [119, 198, 108], [120, 198, 106], [121, 198, 104], [122, 198, 102], [123, 198, 101], [124, 198, 99], [125, 198, 97], [126, 198, 96], [127, 198, 94], [128, 198, 92], [129, 198, 90], [130, 198, 89], [131, 197, 87], [132, 197, 85], [133, 197, 84], [134, 197, 82], [135, 197, 80], [136, 196, 79], [137, 196, 77], [138, 196, 75], [139, 196, 74], [140, 195, 72], [141, 195, 71], [142, 195, 69], [143, 194, 68], [144, 194, 66], [145, 194, 65], [146, 193, 63], [147, 193, 62], [148, 193, 60], [149, 192, 59], [150, 192, 58], [151, 191, 56], [152, 191, 55], [153, 191, 54], [154, 190, 53], [154, 190, 51], [155, 189, 50], [156, 189, 49], [157, 188, 48], [158, 188, 47], [159, 187, 46], [160, 187, 45], [161, 186, 44], [162, 186, 43], [163, 185, 42], [164, 184, 41], [165, 184, 40], [166, 183, 40], [167, 183, 39], [168, 182, 38], [169, 181, 37], [170, 181, 37], [171, 180, 36], [172, 179, 36], [173, 179, 35], [174, 178, 35], [175, 177, 34], [176, 177, 34], [177, 176, 34], [178, 175, 33], [179, 175, 33], [180, 174, 33], [181, 173, 33], [182, 172, 33], [183, 172, 33], [184, 171, 33], [185, 170, 33], [186, 169, 33], [187, 168, 33], [188, 168, 34], [189, 167, 34], [190, 166, 34], [191, 165, 35], [192, 164, 35], [193, 163, 36], [194, 163, 37], [195, 162, 37], [196, 161, 38], [197, 160, 39], [198, 159, 40], [199, 158, 41], [200, 157, 42], [201, 156, 43], [202, 155, 44], [203, 155, 45], [204, 154, 46], [205, 153, 48], [206, 152, 49], [207, 151, 51], [208, 150, 52], [209, 149, 54], [209, 148, 56], [210, 147, 58], [211, 146, 60], [212, 145, 62], [213, 144, 64], [214, 143, 66], [215, 142, 68], [216, 141, 70], [217, 140, 73], [218, 139, 75], [219, 138, 78], [220, 137, 80], [221, 136, 83], [222, 135, 86], [223, 134, 89], [224, 133, 91], [225, 131, 95], [226, 130, 98], [227, 129, 101], [228, 128, 104], [229, 127, 108], [230, 126, 111], [231, 125, 115], [232, 124, 118], [233, 123, 122], [234, 122, 126], [235, 121, 130]];
    var lavaPalette = [[16, 128, 128], [19, 127, 130], [22, 126, 133], [25, 125, 135], [28, 124, 137], [31, 122, 139], [33, 122, 142], [37, 120, 144], [39, 119, 146], [43, 118, 148], [45, 117, 151], [48, 116, 154], [51, 115, 156], [54, 114, 158], [57, 112, 160], [60, 112, 163], [63, 110, 165], [66, 109, 167], [69, 108, 169], [72, 107, 172], [75, 106, 174], [75, 104, 174], [75, 104, 174], [76, 102, 174], [76, 100, 173], [77, 99, 173], [77, 98, 173], [78, 96, 173], [78, 95, 173], [78, 94, 173], [79, 93, 172], [80, 91, 172], [80, 90, 172], [81, 89, 172], [81, 87, 172], [82, 85, 172], [82, 84, 172], [82, 83, 171], [83, 81, 172], [83, 80, 171], [84, 79, 171], [84, 78, 170], [84, 78, 170], [85, 78, 169], [85, 77, 169], [86, 77, 168], [87, 76, 167], [87, 76, 166], [88, 76, 166], [88, 75, 165], [88, 75, 164], [89, 75, 164], [89, 75, 163], [90, 74, 163], [90, 74, 162], [91, 73, 161], [91, 73, 160], [92, 73, 160], [92, 72, 159], [93, 72, 158], [93, 72, 158], [94, 71, 157], [94, 71, 156], [95, 71, 156], [94, 71, 156], [95, 71, 155], [95, 70, 155], [96, 70, 154], [96, 70, 153], [97, 69, 152], [97, 69, 152], [97, 69, 152], [97, 69, 151], [98, 68, 150], [98, 68, 149], [99, 68, 149], [99, 67, 148], [99, 67, 148], [99, 67, 148], [100, 67, 147], [100, 67, 146], [99, 71, 146], [99, 75, 147], [98, 80, 147], [97, 84, 147], [96, 88, 147], [96, 93, 147], [94, 97, 147], [94, 101, 147], [93, 106, 148], [93, 110, 147], [92, 115, 147], [91, 119, 148], [90, 124, 148], [89, 128, 148], [88, 132, 148], [87, 137, 148], [87, 141, 148], [86, 145, 148], [85, 150, 149], [84, 154, 149], [84, 156, 148], [84, 157, 146], [84, 159, 145], [84, 161, 144], [84, 163, 142], [84, 164, 142], [83, 166, 140], [83, 167, 139], [83, 169, 138], [84, 171, 136], [84, 172, 135], [84, 174, 134], [83, 175, 133], [83, 177, 132], [83, 179, 131], [83, 180, 129], [83, 182, 129], [83, 184, 127], [83, 185, 126], [83, 187, 125], [83, 188, 124], [83, 189, 123], [83, 190, 122], [83, 191, 122], [83, 192, 121], [83, 193, 119], [83, 194, 119], [83, 195, 118], [83, 196, 117], [84, 197, 116], [84, 198, 115], [84, 199, 115], [84, 200, 114], [84, 201, 113], [84, 202, 112], [84, 203, 111], [84, 204, 111], [84, 205, 110], [84, 206, 109], [84, 207, 108], [86, 207, 107], [87, 208, 106], [89, 208, 105], [90, 209, 104], [91, 210, 103], [93, 210, 103], [94, 211, 102], [96, 211, 101], [97, 211, 100], [98, 212, 99], [100, 213, 98], [101, 213, 97], [103, 213, 96], [104, 214, 96], [106, 215, 95], [107, 215, 94], [108, 215, 93], [110, 216, 92], [111, 217, 91], [113, 217, 90], [114, 217, 89], [114, 216, 87], [115, 215, 86], [116, 215, 85], [116, 214, 83], [117, 214, 82], [118, 213, 81], [119, 213, 80], [120, 212, 78], [121, 211, 77], [121, 211, 75], [123, 210, 73], [123, 209, 72], [124, 209, 70], [125, 208, 69], [125, 208, 67], [126, 207, 66], [127, 207, 65], [128, 206, 63], [130, 205, 62], [131, 204, 61], [133, 202, 60], [135, 201, 59], [137, 199, 58], [139, 198, 57], [141, 197, 56], [143, 195, 55], [145, 194, 54], [147, 192, 53], [149, 191, 52], [150, 190, 51], [152, 188, 50], [154, 187, 48], [156, 185, 47], [158, 184, 46], [160, 183, 45], [162, 181, 44], [163, 180, 43], [165, 179, 42], [167, 178, 41], [168, 177, 40], [169, 176, 40], [170, 175, 39], [172, 174, 38], [173, 173, 37], [174, 172, 37], [176, 171, 36], [177, 170, 35], [178, 169, 34], [180, 168, 34], [181, 167, 33], [182, 166, 32], [183, 166, 31], [185, 165, 31], [186, 163, 30], [187, 163, 29], [189, 162, 28], [190, 161, 28], [191, 160, 27], [194, 158, 32], [196, 156, 37], [198, 155, 42], [200, 154, 47], [202, 152, 52], [204, 150, 57], [207, 149, 62], [209, 147, 67], [211, 145, 72], [214, 144, 77], [215, 142, 82], [217, 141, 88], [220, 139, 93], [222, 138, 97], [224, 136, 103], [227, 134, 108], [228, 133, 113], [231, 131, 118], [233, 130, 123], [235, 128, 128]];
    changePalette();
    /*
    def YCbCr_to_bgr(c):
    """
    converts from color space YCbCr to BGR
    :param c: tuple of three numbers
    :return: tuple of (b, g, r)
    """
    r = int(c[0] + 1.40200 * (c[1] - 128))
    g = int(c[0] - 0.34414 * (c[2] - 128) - 0.71414 * (c[1] - 128))
    b = int(c[0] + 1.77200 * (c[2] - 128))
    r = max(0, min(255, r))
    g = max(0, min(255, g))
    b = max(0, min(255, b))
    return (b, g, r)
     */
    /**
     * converts from color space YCbCr to RGB
     * @param c
     * @constructor
     */
    function YCbCrTorgb(c) {
        var r = Math.floor(c[0] + 1.40200 * (c[1] - 128));
        var g = Math.floor(c[0] - 0.34414 * (c[2] - 128) - 0.71414 * (c[1] - 128));
        var b = Math.floor(c[0] + 1.77200 * (c[2] - 128));
        r = Math.max(0, Math.min(255, r));
        g = Math.max(0, Math.min(255, g));
        b = Math.max(0, Math.min(255, b));
        return [r, g, b];
    }
    function changePalette() {
        var oldPal = removeDuplicates(lavaPalette);
        var newPal = removeDuplicates(ironPalette);
        for (var i = 0; i < oldPal.length; i++) {
            oldPal[i] = YCbCrTorgb(oldPal[i]);
        }
        for (var i = 0; i < newPal.length; i++) {
            newPal[i] = YCbCrTorgb(newPal[i]);
        }
        // if the sizes don't match up stretch one of them
        if (newPal.length != oldPal.length) {
            if (newPal.length > oldPal.length) {
                oldPal = stretchArray(oldPal, newPal.length);
            }
            else {
                newPal = stretchArray(newPal, oldPal.length);
            }
        }
        var oldToNew = createObjectFromArrays(oldPal, newPal);
        for (var x = 0; x < img.width; x++) {
            for (var y = 0; y < img.height; y++) {
                var imgData = ctx.getImageData(x, y, 1, 1).data.slice(0, 3).toString();
                // var newColor:any = oldToNew[imgData];
                var newColor = ctx.createImageData(1, 1);
                for (var i = 0; i < oldToNew[imgData].length; i++) {
                    newColor.data[i] = oldToNew[imgData][i];
                }
                newColor.data[3] = 255;
                // var imgData:number[] = oldToNew;
                // console.log(ctx.getImageData(x, y, 1, 1).data.slice(0, 3).toString());
                // console.log(oldToNew);
                // console.log(oldToNew[ctx.getImageData(x, y, 1, 1).data.slice(0, 3).toString()]);
                ctx.putImageData(newColor, x, y);
            }
        }
    }
    /**
     * removes duplicate elements from an array
     * @param arr
     */
    function removeDuplicates(arr) {
        var noDup = [];
        for (var i = 0; i < arr.length; i++) {
            var shouldAdd = true;
            for (var n = 0; n < noDup.length; n++) {
                if (arr[i] == noDup[n]) {
                    shouldAdd = false;
                    break;
                }
            }
            if (shouldAdd) {
                noDup.push(arr[i]);
            }
        }
        return noDup;
    }
    /**
     * matches each value from each list in an object
     * so [1, 2, 3] and [4, 5, 6] --> {1:4, 2:5, 3:6}
     * @param arr0 - keys
     * @param arr1 - values
     */
    function createObjectFromArrays(arr0, arr1) {
        var combo = {};
        for (var i = 0; i < arr0.length; i++) {
            combo[arr0[i]] = arr1[i];
        }
        return combo;
    }
    /**
     * fills an array with the specified value
     * @param arr
     * @param val
     */
    function fill(arr, val) {
        for (var i = 0; i < arr.length; i++) {
            arr[i] = val;
        }
        return arr;
    }
    /**
     * stretches a list to be a certain length and tries to fill it in as evenly as possible
     * so with orig as [0, 1, 2] and leng as 5 it would output [0, 0, 1, 1, 2]
     * @param origArr - list to be stretched
     * @param newLength - length of final stretched list
     * @returns - list with length leng filled evenly with values from orig
     */
    function stretchArray(origArr, newLength) {
        var newArr = fill(new Array(newLength), null);
        var numEach = Math.round(newArr.length / origArr.length);
        var prev = 0;
        var i = 0;
        while (numEach * (i + 1) <= newLength && i < origArr.length) {
            newArr.splice.apply(newArr, __spreadArrays([prev, numEach], fill(new Array(numEach), origArr[i])));
            prev = numEach * (i + 1);
            i++;
        }
        var numNull = 0;
        for (var i = 0; i < newArr.length; i++) {
            if (newArr[i] == null) {
                numNull++;
            }
        }
        if (numNull > 0) {
            if (i >= origArr.length) {
                i = origArr.length - 1;
            }
            newArr.splice.apply(newArr, __spreadArrays([newArr.length - numNull, numNull], stretchArray([origArr[i]], numNull)));
        }
        return newArr;
    }
};
/*

window.onload = function() {
    var img = document.getElementById("ir-img");
    // var canvas = document.createElement('canvas');
    var canvas = document.getElementById("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var context = canvas.getContext('2d')
    context.drawImage(img, 0, 0, img.width, img.height);

    var pixelData = context.getImageData(100, 10, 1, 1).data;
    console.log("100, 10 " + pixelData);
    document.getElementById("text").innerText = "" + pixelData + "hi";
}


 */ 
